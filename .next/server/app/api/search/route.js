/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/search/route";
exports.ids = ["app/api/search/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fsearch%2Froute&page=%2Fapi%2Fsearch%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsearch%2Froute.ts&appDir=%2FUsers%2Fgriffin%2Fdev%2Ffiber-where-are-you%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fgriffin%2Fdev%2Ffiber-where-are-you&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fsearch%2Froute&page=%2Fapi%2Fsearch%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsearch%2Froute.ts&appDir=%2FUsers%2Fgriffin%2Fdev%2Ffiber-where-are-you%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fgriffin%2Fdev%2Ffiber-where-are-you&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _Users_griffin_dev_fiber_where_are_you_src_app_api_search_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./src/app/api/search/route.ts */ \"(rsc)/./src/app/api/search/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/search/route\",\n        pathname: \"/api/search\",\n        filename: \"route\",\n        bundlePath: \"app/api/search/route\"\n    },\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || '',\n    resolvedPagePath: \"/Users/griffin/dev/fiber-where-are-you/src/app/api/search/route.ts\",\n    nextConfigOutput,\n    userland: _Users_griffin_dev_fiber_where_are_you_src_app_api_search_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/search/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = false;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        if (!(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fsearch%2Froute&page=%2Fapi%2Fsearch%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsearch%2Froute.ts&appDir=%2FUsers%2Fgriffin%2Fdev%2Ffiber-where-are-you%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fgriffin%2Fdev%2Ffiber-where-are-you&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/search/route.ts":
/*!*************************************!*\
  !*** ./src/app/api/search/route.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_services_geocoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/services/geocoding */ \"(rsc)/./src/lib/services/geocoding.ts\");\n/* harmony import */ var _lib_services_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/services/provider */ \"(rsc)/./src/lib/services/provider.ts\");\n\n\n\nasync function POST(request) {\n    try {\n        const { address } = await request.json();\n        if (!address || typeof address !== 'string') {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Address is required and must be a string'\n            }, {\n                status: 400\n            });\n        }\n        const geoidResult = await _lib_services_geocoding__WEBPACK_IMPORTED_MODULE_1__.GeocodingService.addressToGeoid(address);\n        if (!geoidResult) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Could not find GEOID for the provided address'\n            }, {\n                status: 404\n            });\n        }\n        const providers = await _lib_services_provider__WEBPACK_IMPORTED_MODULE_2__.ProviderService.findProvidersByGeoid(geoidResult.blockGeoid);\n        const stats = await _lib_services_provider__WEBPACK_IMPORTED_MODULE_2__.ProviderService.getProviderStats(geoidResult.blockGeoid);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            address: _lib_services_geocoding__WEBPACK_IMPORTED_MODULE_1__.GeocodingService.parseAddress(address),\n            geoid: geoidResult,\n            providers,\n            stats,\n            meta: {\n                totalResults: providers.length,\n                searchedAt: new Date().toISOString()\n            }\n        });\n    } catch (error) {\n        console.error('Search API error:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Internal server error occurred while searching'\n        }, {\n            status: 500\n        });\n    }\n}\nasync function GET(request) {\n    const searchParams = request.nextUrl.searchParams;\n    const address = searchParams.get('address');\n    if (!address) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Address query parameter is required'\n        }, {\n            status: 400\n        });\n    }\n    try {\n        const geoidResult = await _lib_services_geocoding__WEBPACK_IMPORTED_MODULE_1__.GeocodingService.addressToGeoid(address);\n        if (!geoidResult) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Could not find GEOID for the provided address'\n            }, {\n                status: 404\n            });\n        }\n        const providers = await _lib_services_provider__WEBPACK_IMPORTED_MODULE_2__.ProviderService.findProvidersByGeoid(geoidResult.blockGeoid);\n        const stats = await _lib_services_provider__WEBPACK_IMPORTED_MODULE_2__.ProviderService.getProviderStats(geoidResult.blockGeoid);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            address: _lib_services_geocoding__WEBPACK_IMPORTED_MODULE_1__.GeocodingService.parseAddress(address),\n            geoid: geoidResult,\n            providers,\n            stats,\n            meta: {\n                totalResults: providers.length,\n                searchedAt: new Date().toISOString()\n            }\n        });\n    } catch (error) {\n        console.error('Search API error:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Internal server error occurred while searching'\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9zZWFyY2gvcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBd0Q7QUFDSTtBQUNGO0FBRW5ELGVBQWVHLEtBQUtDLE9BQW9CO0lBQzdDLElBQUk7UUFDRixNQUFNLEVBQUVDLE9BQU8sRUFBRSxHQUFHLE1BQU1ELFFBQVFFLElBQUk7UUFFdEMsSUFBSSxDQUFDRCxXQUFXLE9BQU9BLFlBQVksVUFBVTtZQUMzQyxPQUFPTCxxREFBWUEsQ0FBQ00sSUFBSSxDQUN0QjtnQkFBRUMsT0FBTztZQUEyQyxHQUNwRDtnQkFBRUMsUUFBUTtZQUFJO1FBRWxCO1FBRUEsTUFBTUMsY0FBYyxNQUFNUixxRUFBZ0JBLENBQUNTLGNBQWMsQ0FBQ0w7UUFFMUQsSUFBSSxDQUFDSSxhQUFhO1lBQ2hCLE9BQU9ULHFEQUFZQSxDQUFDTSxJQUFJLENBQ3RCO2dCQUFFQyxPQUFPO1lBQWdELEdBQ3pEO2dCQUFFQyxRQUFRO1lBQUk7UUFFbEI7UUFFQSxNQUFNRyxZQUFZLE1BQU1ULG1FQUFlQSxDQUFDVSxvQkFBb0IsQ0FBQ0gsWUFBWUksVUFBVTtRQUVuRixNQUFNQyxRQUFRLE1BQU1aLG1FQUFlQSxDQUFDYSxnQkFBZ0IsQ0FBQ04sWUFBWUksVUFBVTtRQUUzRSxPQUFPYixxREFBWUEsQ0FBQ00sSUFBSSxDQUFDO1lBQ3ZCRCxTQUFTSixxRUFBZ0JBLENBQUNlLFlBQVksQ0FBQ1g7WUFDdkNZLE9BQU9SO1lBQ1BFO1lBQ0FHO1lBQ0FJLE1BQU07Z0JBQ0pDLGNBQWNSLFVBQVVTLE1BQU07Z0JBQzlCQyxZQUFZLElBQUlDLE9BQU9DLFdBQVc7WUFDcEM7UUFDRjtJQUVGLEVBQUUsT0FBT2hCLE9BQU87UUFDZGlCLFFBQVFqQixLQUFLLENBQUMscUJBQXFCQTtRQUNuQyxPQUFPUCxxREFBWUEsQ0FBQ00sSUFBSSxDQUN0QjtZQUFFQyxPQUFPO1FBQWlELEdBQzFEO1lBQUVDLFFBQVE7UUFBSTtJQUVsQjtBQUNGO0FBRU8sZUFBZWlCLElBQUlyQixPQUFvQjtJQUM1QyxNQUFNc0IsZUFBZXRCLFFBQVF1QixPQUFPLENBQUNELFlBQVk7SUFDakQsTUFBTXJCLFVBQVVxQixhQUFhRSxHQUFHLENBQUM7SUFFakMsSUFBSSxDQUFDdkIsU0FBUztRQUNaLE9BQU9MLHFEQUFZQSxDQUFDTSxJQUFJLENBQ3RCO1lBQUVDLE9BQU87UUFBc0MsR0FDL0M7WUFBRUMsUUFBUTtRQUFJO0lBRWxCO0lBRUEsSUFBSTtRQUNGLE1BQU1DLGNBQWMsTUFBTVIscUVBQWdCQSxDQUFDUyxjQUFjLENBQUNMO1FBRTFELElBQUksQ0FBQ0ksYUFBYTtZQUNoQixPQUFPVCxxREFBWUEsQ0FBQ00sSUFBSSxDQUN0QjtnQkFBRUMsT0FBTztZQUFnRCxHQUN6RDtnQkFBRUMsUUFBUTtZQUFJO1FBRWxCO1FBRUEsTUFBTUcsWUFBWSxNQUFNVCxtRUFBZUEsQ0FBQ1Usb0JBQW9CLENBQUNILFlBQVlJLFVBQVU7UUFFbkYsTUFBTUMsUUFBUSxNQUFNWixtRUFBZUEsQ0FBQ2EsZ0JBQWdCLENBQUNOLFlBQVlJLFVBQVU7UUFFM0UsT0FBT2IscURBQVlBLENBQUNNLElBQUksQ0FBQztZQUN2QkQsU0FBU0oscUVBQWdCQSxDQUFDZSxZQUFZLENBQUNYO1lBQ3ZDWSxPQUFPUjtZQUNQRTtZQUNBRztZQUNBSSxNQUFNO2dCQUNKQyxjQUFjUixVQUFVUyxNQUFNO2dCQUM5QkMsWUFBWSxJQUFJQyxPQUFPQyxXQUFXO1lBQ3BDO1FBQ0Y7SUFFRixFQUFFLE9BQU9oQixPQUFPO1FBQ2RpQixRQUFRakIsS0FBSyxDQUFDLHFCQUFxQkE7UUFDbkMsT0FBT1AscURBQVlBLENBQUNNLElBQUksQ0FDdEI7WUFBRUMsT0FBTztRQUFpRCxHQUMxRDtZQUFFQyxRQUFRO1FBQUk7SUFFbEI7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL2dyaWZmaW4vZGV2L2ZpYmVyLXdoZXJlLWFyZS15b3Uvc3JjL2FwcC9hcGkvc2VhcmNoL3JvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgeyBHZW9jb2RpbmdTZXJ2aWNlIH0gZnJvbSAnQC9saWIvc2VydmljZXMvZ2VvY29kaW5nJztcbmltcG9ydCB7IFByb3ZpZGVyU2VydmljZSB9IGZyb20gJ0AvbGliL3NlcnZpY2VzL3Byb3ZpZGVyJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IGFkZHJlc3MgfSA9IGF3YWl0IHJlcXVlc3QuanNvbigpO1xuICAgIFxuICAgIGlmICghYWRkcmVzcyB8fCB0eXBlb2YgYWRkcmVzcyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgeyBlcnJvcjogJ0FkZHJlc3MgaXMgcmVxdWlyZWQgYW5kIG11c3QgYmUgYSBzdHJpbmcnIH0sXG4gICAgICAgIHsgc3RhdHVzOiA0MDAgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCBnZW9pZFJlc3VsdCA9IGF3YWl0IEdlb2NvZGluZ1NlcnZpY2UuYWRkcmVzc1RvR2VvaWQoYWRkcmVzcyk7XG4gICAgXG4gICAgaWYgKCFnZW9pZFJlc3VsdCkge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICB7IGVycm9yOiAnQ291bGQgbm90IGZpbmQgR0VPSUQgZm9yIHRoZSBwcm92aWRlZCBhZGRyZXNzJyB9LFxuICAgICAgICB7IHN0YXR1czogNDA0IH1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgcHJvdmlkZXJzID0gYXdhaXQgUHJvdmlkZXJTZXJ2aWNlLmZpbmRQcm92aWRlcnNCeUdlb2lkKGdlb2lkUmVzdWx0LmJsb2NrR2VvaWQpO1xuICAgIFxuICAgIGNvbnN0IHN0YXRzID0gYXdhaXQgUHJvdmlkZXJTZXJ2aWNlLmdldFByb3ZpZGVyU3RhdHMoZ2VvaWRSZXN1bHQuYmxvY2tHZW9pZCk7XG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgYWRkcmVzczogR2VvY29kaW5nU2VydmljZS5wYXJzZUFkZHJlc3MoYWRkcmVzcyksXG4gICAgICBnZW9pZDogZ2VvaWRSZXN1bHQsXG4gICAgICBwcm92aWRlcnMsXG4gICAgICBzdGF0cyxcbiAgICAgIG1ldGE6IHtcbiAgICAgICAgdG90YWxSZXN1bHRzOiBwcm92aWRlcnMubGVuZ3RoLFxuICAgICAgICBzZWFyY2hlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICB9LFxuICAgIH0pO1xuXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignU2VhcmNoIEFQSSBlcnJvcjonLCBlcnJvcik7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgeyBlcnJvcjogJ0ludGVybmFsIHNlcnZlciBlcnJvciBvY2N1cnJlZCB3aGlsZSBzZWFyY2hpbmcnIH0sXG4gICAgICB7IHN0YXR1czogNTAwIH1cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcbiAgY29uc3Qgc2VhcmNoUGFyYW1zID0gcmVxdWVzdC5uZXh0VXJsLnNlYXJjaFBhcmFtcztcbiAgY29uc3QgYWRkcmVzcyA9IHNlYXJjaFBhcmFtcy5nZXQoJ2FkZHJlc3MnKTtcbiAgXG4gIGlmICghYWRkcmVzcykge1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgIHsgZXJyb3I6ICdBZGRyZXNzIHF1ZXJ5IHBhcmFtZXRlciBpcyByZXF1aXJlZCcgfSxcbiAgICAgIHsgc3RhdHVzOiA0MDAgfVxuICAgICk7XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IGdlb2lkUmVzdWx0ID0gYXdhaXQgR2VvY29kaW5nU2VydmljZS5hZGRyZXNzVG9HZW9pZChhZGRyZXNzKTtcbiAgICBcbiAgICBpZiAoIWdlb2lkUmVzdWx0KSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgZXJyb3I6ICdDb3VsZCBub3QgZmluZCBHRU9JRCBmb3IgdGhlIHByb3ZpZGVkIGFkZHJlc3MnIH0sXG4gICAgICAgIHsgc3RhdHVzOiA0MDQgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCBwcm92aWRlcnMgPSBhd2FpdCBQcm92aWRlclNlcnZpY2UuZmluZFByb3ZpZGVyc0J5R2VvaWQoZ2VvaWRSZXN1bHQuYmxvY2tHZW9pZCk7XG4gICAgXG4gICAgY29uc3Qgc3RhdHMgPSBhd2FpdCBQcm92aWRlclNlcnZpY2UuZ2V0UHJvdmlkZXJTdGF0cyhnZW9pZFJlc3VsdC5ibG9ja0dlb2lkKTtcblxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICBhZGRyZXNzOiBHZW9jb2RpbmdTZXJ2aWNlLnBhcnNlQWRkcmVzcyhhZGRyZXNzKSxcbiAgICAgIGdlb2lkOiBnZW9pZFJlc3VsdCxcbiAgICAgIHByb3ZpZGVycyxcbiAgICAgIHN0YXRzLFxuICAgICAgbWV0YToge1xuICAgICAgICB0b3RhbFJlc3VsdHM6IHByb3ZpZGVycy5sZW5ndGgsXG4gICAgICAgIHNlYXJjaGVkQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdTZWFyY2ggQVBJIGVycm9yOicsIGVycm9yKTtcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICB7IGVycm9yOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yIG9jY3VycmVkIHdoaWxlIHNlYXJjaGluZycgfSxcbiAgICAgIHsgc3RhdHVzOiA1MDAgfVxuICAgICk7XG4gIH1cbn0iXSwibmFtZXMiOlsiTmV4dFJlc3BvbnNlIiwiR2VvY29kaW5nU2VydmljZSIsIlByb3ZpZGVyU2VydmljZSIsIlBPU1QiLCJyZXF1ZXN0IiwiYWRkcmVzcyIsImpzb24iLCJlcnJvciIsInN0YXR1cyIsImdlb2lkUmVzdWx0IiwiYWRkcmVzc1RvR2VvaWQiLCJwcm92aWRlcnMiLCJmaW5kUHJvdmlkZXJzQnlHZW9pZCIsImJsb2NrR2VvaWQiLCJzdGF0cyIsImdldFByb3ZpZGVyU3RhdHMiLCJwYXJzZUFkZHJlc3MiLCJnZW9pZCIsIm1ldGEiLCJ0b3RhbFJlc3VsdHMiLCJsZW5ndGgiLCJzZWFyY2hlZEF0IiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwiY29uc29sZSIsIkdFVCIsInNlYXJjaFBhcmFtcyIsIm5leHRVcmwiLCJnZXQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/search/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/db.ts":
/*!***********************!*\
  !*** ./src/lib/db.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   db: () => (/* binding */ db)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst globalForPrisma = globalThis;\nconst db = globalForPrisma.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\nif (true) {\n    globalForPrisma.prisma = db;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2RiLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE4QztBQUU5QyxNQUFNQyxrQkFBa0JDO0FBSWpCLE1BQU1DLEtBQUtGLGdCQUFnQkcsTUFBTSxJQUFJLElBQUlKLHdEQUFZQSxHQUFHO0FBRS9ELElBQUlLLElBQXFDLEVBQUU7SUFDekNKLGdCQUFnQkcsTUFBTSxHQUFHRDtBQUMzQiIsInNvdXJjZXMiOlsiL1VzZXJzL2dyaWZmaW4vZGV2L2ZpYmVyLXdoZXJlLWFyZS15b3Uvc3JjL2xpYi9kYi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcmlzbWFDbGllbnQgfSBmcm9tICdAcHJpc21hL2NsaWVudCc7XG5cbmNvbnN0IGdsb2JhbEZvclByaXNtYSA9IGdsb2JhbFRoaXMgYXMgdW5rbm93biBhcyB7XG4gIHByaXNtYTogUHJpc21hQ2xpZW50IHwgdW5kZWZpbmVkO1xufTtcblxuZXhwb3J0IGNvbnN0IGRiID0gZ2xvYmFsRm9yUHJpc21hLnByaXNtYSA/PyBuZXcgUHJpc21hQ2xpZW50KCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGdsb2JhbEZvclByaXNtYS5wcmlzbWEgPSBkYjtcbn0iXSwibmFtZXMiOlsiUHJpc21hQ2xpZW50IiwiZ2xvYmFsRm9yUHJpc21hIiwiZ2xvYmFsVGhpcyIsImRiIiwicHJpc21hIiwicHJvY2VzcyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/db.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/services/geocoding.ts":
/*!***************************************!*\
  !*** ./src/lib/services/geocoding.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GeocodingService: () => (/* binding */ GeocodingService),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass GeocodingService {\n    static{\n        this.CENSUS_GEOCODING_URL = 'https://geocoding.geo.census.gov/geocoder/geographies/onelineaddress';\n    }\n    static async addressToCoordinates(address) {\n        try {\n            const encodedAddress = encodeURIComponent(address);\n            const url = `${this.CENSUS_GEOCODING_URL}?address=${encodedAddress}&benchmark=2020&vintage=2020&format=json`;\n            const response = await fetch(url);\n            if (!response.ok) {\n                throw new Error(`Geocoding failed: ${response.statusText}`);\n            }\n            const data = await response.json();\n            if (data.result?.addressMatches && data.result.addressMatches.length > 0) {\n                const match = data.result.addressMatches[0];\n                return {\n                    lat: parseFloat(match.coordinates.y),\n                    lng: parseFloat(match.coordinates.x)\n                };\n            }\n            return null;\n        } catch (error) {\n            console.error('Geocoding error:', error);\n            return null;\n        }\n    }\n    static async addressToGeoid(address) {\n        try {\n            // Step 1: Try direct address to GEOID (Census geocoding)\n            const directResult = await this.directAddressToGeoid(address);\n            if (directResult) {\n                return directResult;\n            }\n            // Step 2: If direct fails, use lat/long approach (more reliable)\n            console.log('Direct address lookup failed, trying lat/long approach...');\n            // First get coordinates from Google Places (since we have the API key)\n            const coordinates = await this.getCoordinatesFromGoogle(address);\n            if (!coordinates) {\n                // Fallback to Census geocoding for coordinates\n                const censusCoords = await this.addressToCoordinates(address);\n                if (!censusCoords) {\n                    return null;\n                }\n                return this.coordinatesToGeoid(censusCoords.lng, censusCoords.lat);\n            }\n            return this.coordinatesToGeoid(coordinates.lng, coordinates.lat);\n        } catch (error) {\n            console.error('GEOID lookup error:', error);\n            return null;\n        }\n    }\n    static async directAddressToGeoid(address) {\n        try {\n            const encodedAddress = encodeURIComponent(address);\n            const url = `${this.CENSUS_GEOCODING_URL}?address=${encodedAddress}&benchmark=2020&vintage=2020&format=json&layers=all`;\n            const response = await fetch(url);\n            if (!response.ok) {\n                return null;\n            }\n            const data = await response.json();\n            if (data.result?.addressMatches && data.result.addressMatches.length > 0) {\n                const match = data.result.addressMatches[0];\n                const geographies = match.geographies;\n                if (geographies && geographies['2020 Census Blocks']) {\n                    const block = geographies['2020 Census Blocks'][0];\n                    const blockGeoid = block.GEOID;\n                    return {\n                        blockGeoid,\n                        state: blockGeoid.substring(0, 2),\n                        county: blockGeoid.substring(2, 5),\n                        tract: blockGeoid.substring(5, 11),\n                        block: blockGeoid.substring(11, 15)\n                    };\n                }\n            }\n            return null;\n        } catch (error) {\n            console.warn('Direct address to GEOID failed:', error);\n            return null;\n        }\n    }\n    static async getCoordinatesFromGoogle(address) {\n        try {\n            const apiKey = process.env.GOOGLE_PLACES_API_KEY;\n            if (!apiKey) {\n                return null;\n            }\n            // Use Google Geocoding API (different from Places API)\n            const url = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(address)}&key=${apiKey}`;\n            const response = await fetch(url);\n            if (!response.ok) {\n                return null;\n            }\n            const data = await response.json();\n            if (data.results && data.results.length > 0) {\n                const location = data.results[0].geometry.location;\n                return {\n                    lat: location.lat,\n                    lng: location.lng\n                };\n            }\n            return null;\n        } catch (error) {\n            console.warn('Google geocoding failed:', error);\n            return null;\n        }\n    }\n    static async coordinatesToGeoid(lng, lat) {\n        try {\n            const url = `https://geocoding.geo.census.gov/geocoder/geographies/coordinates?x=${lng}&y=${lat}&benchmark=2020&vintage=2020&format=json&layers=all`;\n            const response = await fetch(url);\n            if (!response.ok) {\n                throw new Error(`Reverse geocoding failed: ${response.statusText}`);\n            }\n            const data = await response.json();\n            if (data.result?.geographies && data.result.geographies['Census Blocks']) {\n                const block = data.result.geographies['Census Blocks'][0];\n                const blockGeoid = block.GEOID;\n                return {\n                    blockGeoid,\n                    state: blockGeoid.substring(0, 2),\n                    county: blockGeoid.substring(2, 5),\n                    tract: blockGeoid.substring(5, 11),\n                    block: blockGeoid.substring(11, 15)\n                };\n            }\n            return null;\n        } catch (error) {\n            console.error('Coordinates to GEOID error:', error);\n            return null;\n        }\n    }\n    static parseAddress(addressString) {\n        const parts = addressString.split(',').map((part)=>part.trim());\n        let street = '';\n        let city = '';\n        let state = '';\n        let zipCode = '';\n        if (parts.length >= 1) {\n            street = parts[0];\n        }\n        if (parts.length >= 2) {\n            city = parts[1];\n        }\n        if (parts.length >= 3) {\n            const stateZipPart = parts[2];\n            const stateZipMatch = stateZipPart.match(/^(.+?)\\s+(\\d{5}(?:-\\d{4})?)$/);\n            if (stateZipMatch) {\n                state = stateZipMatch[1];\n                zipCode = stateZipMatch[2];\n            } else {\n                state = stateZipPart;\n            }\n        }\n        return {\n            street,\n            city,\n            state,\n            zipCode,\n            full: addressString\n        };\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GeocodingService);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/services/geocoding.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/services/provider.ts":
/*!**************************************!*\
  !*** ./src/lib/services/provider.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProviderService: () => (/* binding */ ProviderService),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/db */ \"(rsc)/./src/lib/db.ts\");\n\nclass ProviderService {\n    static async findProvidersByGeoid(blockGeoid) {\n        try {\n            const providers = await _lib_db__WEBPACK_IMPORTED_MODULE_0__.db.fiberProvider.findMany({\n                where: {\n                    blockGeoid: blockGeoid,\n                    maxAdvertisedDownloadSpeed: {\n                        gte: 900\n                    },\n                    maxAdvertisedUploadSpeed: {\n                        gte: 900\n                    }\n                },\n                orderBy: [\n                    {\n                        brandName: 'asc'\n                    },\n                    {\n                        maxAdvertisedDownloadSpeed: 'desc'\n                    }\n                ]\n            });\n            // Group providers by providerId (or brandName as fallback)\n            const groupedProviders = new Map();\n            providers.forEach((provider)=>{\n                const key = provider.providerId || provider.brandName;\n                if (!groupedProviders.has(key)) {\n                    groupedProviders.set(key, []);\n                }\n                groupedProviders.get(key).push(provider);\n            });\n            // Convert grouped providers to search results with speed ranges\n            return Array.from(groupedProviders.entries()).map(([, providerGroup])=>{\n                const representative = providerGroup[0]; // Use first provider as representative\n                // Calculate speed ranges\n                const downloadSpeeds = providerGroup.map((p)=>p.maxAdvertisedDownloadSpeed);\n                const uploadSpeeds = providerGroup.map((p)=>p.maxAdvertisedUploadSpeed);\n                const minDownload = Math.min(...downloadSpeeds);\n                const maxDownload = Math.max(...downloadSpeeds);\n                const minUpload = Math.min(...uploadSpeeds);\n                const maxUpload = Math.max(...uploadSpeeds);\n                return {\n                    provider: representative,\n                    speeds: {\n                        download: maxDownload === minDownload ? maxDownload : {\n                            min: minDownload,\n                            max: maxDownload\n                        },\n                        upload: maxUpload === minUpload ? maxUpload : {\n                            min: minUpload,\n                            max: maxUpload\n                        }\n                    },\n                    technology: this.getTechnologyName(representative.technology),\n                    availability: this.getAvailabilityType(representative.businessResidentialCode),\n                    planCount: providerGroup.length\n                };\n            });\n        } catch (error) {\n            console.error('Error finding providers by GEOID:', error);\n            return [];\n        }\n    }\n    static async findProvidersByState(state) {\n        try {\n            const providers = await _lib_db__WEBPACK_IMPORTED_MODULE_0__.db.fiberProvider.groupBy({\n                by: [\n                    'brandName'\n                ],\n                where: {\n                    stateUsps: state.toUpperCase()\n                },\n                orderBy: {\n                    brandName: 'asc'\n                }\n            });\n            return providers.map((provider)=>provider.brandName);\n        } catch (error) {\n            console.error('Error finding providers by state:', error);\n            return [];\n        }\n    }\n    static async getProviderStats(blockGeoid) {\n        try {\n            const whereClause = blockGeoid ? {\n                blockGeoid\n            } : {};\n            const [totalProviders, avgDownloadSpeed, avgUploadSpeed, topProviders] = await Promise.all([\n                _lib_db__WEBPACK_IMPORTED_MODULE_0__.db.fiberProvider.count({\n                    where: whereClause\n                }),\n                _lib_db__WEBPACK_IMPORTED_MODULE_0__.db.fiberProvider.aggregate({\n                    _avg: {\n                        maxAdvertisedDownloadSpeed: true\n                    },\n                    where: whereClause\n                }),\n                _lib_db__WEBPACK_IMPORTED_MODULE_0__.db.fiberProvider.aggregate({\n                    _avg: {\n                        maxAdvertisedUploadSpeed: true\n                    },\n                    where: whereClause\n                }),\n                _lib_db__WEBPACK_IMPORTED_MODULE_0__.db.fiberProvider.groupBy({\n                    by: [\n                        'brandName'\n                    ],\n                    where: whereClause,\n                    _count: {\n                        brandName: true\n                    },\n                    orderBy: {\n                        _count: {\n                            brandName: 'desc'\n                        }\n                    },\n                    take: 5\n                })\n            ]);\n            return {\n                totalProviders,\n                averageDownloadSpeed: Math.round(avgDownloadSpeed._avg.maxAdvertisedDownloadSpeed || 0),\n                averageUploadSpeed: Math.round(avgUploadSpeed._avg.maxAdvertisedUploadSpeed || 0),\n                topProviders: topProviders.map((provider)=>({\n                        name: provider.brandName,\n                        count: provider._count.brandName\n                    }))\n            };\n        } catch (error) {\n            console.error('Error getting provider stats:', error);\n            return {\n                totalProviders: 0,\n                averageDownloadSpeed: 0,\n                averageUploadSpeed: 0,\n                topProviders: []\n            };\n        }\n    }\n    static mapToSearchResult(provider) {\n        return {\n            provider,\n            speeds: {\n                download: provider.maxAdvertisedDownloadSpeed,\n                upload: provider.maxAdvertisedUploadSpeed\n            },\n            technology: this.getTechnologyName(provider.technology),\n            availability: this.getAvailabilityType(provider.businessResidentialCode)\n        };\n    }\n    static getTechnologyName(technology) {\n        const technologyMap = {\n            10: 'Asymmetric DSL',\n            20: 'Symmetric DSL',\n            30: 'Other Copper Wireline',\n            40: 'Cable Modem - DOCSIS 3.0',\n            41: 'Cable Modem - DOCSIS 3.1',\n            42: 'Cable Modem - Other',\n            43: 'Cable Modem - DOCSIS 3.1 and Other',\n            50: 'Optical Carrier / Fiber to the End User',\n            60: 'Satellite',\n            70: 'Terrestrial Fixed Wireless',\n            71: 'Licensed Terrestrial Fixed Wireless',\n            72: 'Licensed-by-Rule Terrestrial Fixed Wireless',\n            80: 'Terrestrial Mobile Wireless',\n            90: 'Electric Power Line',\n            0: 'All Other'\n        };\n        return technologyMap[technology] || `Technology ${technology}`;\n    }\n    static getAvailabilityType(code) {\n        switch(code.toUpperCase()){\n            case 'R':\n                return 'Residential Only';\n            case 'B':\n                return 'Business Only';\n            case 'X':\n                return 'Residential and Business';\n            default:\n                return 'Unknown';\n        }\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ProviderService);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/services/provider.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/server/app-render/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/action-async-storage.external.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fsearch%2Froute&page=%2Fapi%2Fsearch%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsearch%2Froute.ts&appDir=%2FUsers%2Fgriffin%2Fdev%2Ffiber-where-are-you%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fgriffin%2Fdev%2Ffiber-where-are-you&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();